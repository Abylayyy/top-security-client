// Generated by Dagger (https://google.github.io/dagger).
package kz.topsecurity.client.di.components.app;

import android.app.Activity;
import android.app.Application;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import kz.topsecurity.client.application.TopSecurityClientApplication;
import kz.topsecurity.client.application.TopSecurityClientApplication_MembersInjector;
import kz.topsecurity.client.di.components.AlertHistory.AlertHistoryComponent;
import kz.topsecurity.client.di.modules.AlertHistory.AlertHistoryModule;
import kz.topsecurity.client.di.modules.AlertHistory.AlertHistoryModule_ProvideAlertHistoryActivityFactory;
import kz.topsecurity.client.domain.AlertHistoryScreen.AlertHistoryActivity;
import kz.topsecurity.client.domain.AlertHistoryScreen.AlertHistoryActivity_MembersInjector;
import kz.topsecurity.client.domain.AlertHistoryScreen.adapter.AlertListAdapter;

public final class DaggerAppComponent implements AppComponent {
  private Provider<AlertHistoryComponent.Builder> alertHistoryComponentBuilderProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return ImmutableMap
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>of(
            AlertHistoryActivity.class, (Provider) alertHistoryComponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.alertHistoryComponentBuilderProvider =
        new Provider<AlertHistoryComponent.Builder>() {
          @Override
          public AlertHistoryComponent.Builder get() {
            return new AlertHistoryComponentBuilder();
          }
        };
  }

  @Override
  public void inject(TopSecurityClientApplication app) {
    injectTopSecurityClientApplication(app);
  }

  @CanIgnoreReturnValue
  private TopSecurityClientApplication injectTopSecurityClientApplication(
      TopSecurityClientApplication instance) {
    TopSecurityClientApplication_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public AppComponent build() {
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class AlertHistoryComponentBuilder extends AlertHistoryComponent.Builder {
    private AlertHistoryModule alertHistoryModule;

    private AlertHistoryActivity seedInstance;

    @Override
    public AlertHistoryComponent build() {
      if (alertHistoryModule == null) {
        this.alertHistoryModule = new AlertHistoryModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            AlertHistoryActivity.class.getCanonicalName() + " must be set");
      }
      return new AlertHistoryComponentImpl(this);
    }

    @Override
    public void seedInstance(AlertHistoryActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class AlertHistoryComponentImpl implements AlertHistoryComponent {
    private AlertHistoryModule alertHistoryModule;

    private AlertHistoryActivity seedInstance;

    private AlertHistoryComponentImpl(AlertHistoryComponentBuilder builder) {
      initialize(builder);
    }

    private AlertListAdapter getAlertListAdapter() {
      return AlertHistoryModule_ProvideAlertHistoryActivityFactory.proxyProvideAlertHistoryActivity(
          alertHistoryModule, seedInstance);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final AlertHistoryComponentBuilder builder) {
      this.alertHistoryModule = builder.alertHistoryModule;
      this.seedInstance = builder.seedInstance;
    }

    @Override
    public void inject(AlertHistoryActivity arg0) {
      injectAlertHistoryActivity(arg0);
    }

    @CanIgnoreReturnValue
    private AlertHistoryActivity injectAlertHistoryActivity(AlertHistoryActivity instance) {
      AlertHistoryActivity_MembersInjector.injectMAdapter(instance, getAlertListAdapter());
      return instance;
    }
  }
}
