// This file was generated by PermissionsDispatcher. Do not modify!
package kz.topsecurity.client.domain.RegisterScreen;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class SignUpActivityPermissionsDispatcher {
  private static final int REQUEST_CAPTUREPHOTO = 3;

  private static final String[] PERMISSION_CAPTUREPHOTO = new String[] {"android.permission.CAMERA"};

  private SignUpActivityPermissionsDispatcher() {
  }

  static void capturePhotoWithCheck(SignUpActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_CAPTUREPHOTO)) {
      target.capturePhoto();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_CAPTUREPHOTO)) {
        target.showRationaleForPick(new CapturePhotoPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_CAPTUREPHOTO, REQUEST_CAPTUREPHOTO);
      }
    }
  }

  static void onRequestPermissionsResult(SignUpActivity target, int requestCode,
      int[] grantResults) {
    switch (requestCode) {
      case REQUEST_CAPTUREPHOTO:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_CAPTUREPHOTO)) {
        target.showDeniedForCamera();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.capturePhoto();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_CAPTUREPHOTO)) {
          target.showNeverAskForCamera();
        } else {
          target.showDeniedForCamera();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class CapturePhotoPermissionRequest implements PermissionRequest {
    private final WeakReference<SignUpActivity> weakTarget;

    private CapturePhotoPermissionRequest(SignUpActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      SignUpActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_CAPTUREPHOTO, REQUEST_CAPTUREPHOTO);
    }

    @Override
    public void cancel() {
      SignUpActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForCamera();
    }
  }
}
